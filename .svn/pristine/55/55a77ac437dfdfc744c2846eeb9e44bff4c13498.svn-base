package skimp.partner.store.nativeex;

//import org.apache.mina.util.Base64;
//
//import java.io.UnsupportedEncodingException;
//import java.security.GeneralSecurityException;
//import java.security.Key;
//import java.security.NoSuchAlgorithmException;
//
//import javax.crypto.Cipher;
//import javax.crypto.spec.IvParameterSpec;
//import javax.crypto.spec.SecretKeySpec;
//
///**
// * 양방향 암호화 알고리즘인 AES256 암호화를 지원하는 클래스
// */
//public class AES256Util {
//    private String iv;
//    private Key keySpec;
//
//    /**
//     * 16자리의 키값을 입력하여 객체를 생성한다.
//     *
//     * @param key
//     * 암/복호화를 위한 키값
//     * @throws UnsupportedEncodingException
//     * 키값의 길이가 16이하일 경우 발생
//     */
//    final static String key = "비밀키입력하는곳";
//
//    public AES256Util() throws UnsupportedEncodingException {
//        this.iv = key.substring(0, 16);
//        byte[] keyBytes = new byte[16];
//        byte[] b = key.getBytes("UTF-8");
//        int len = b.length;
//        if (len > keyBytes.length) {
//            len = keyBytes.length;
//        }
//        System.arraycopy(b, 0, keyBytes, 0, len);
//        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
//
//        this.keySpec = keySpec;
//    }
//
//    /**
//     * AES256 으로 암호화 한다.
//     *
//     * @param str 암호화할 문자열
//     * @return
//     * @throws NoSuchAlgorithmException
//     * @throws GeneralSecurityException
//     * @throws UnsupportedEncodingException
//     */
//    public String encrypt(String str) throws NoSuchAlgorithmException,
//            GeneralSecurityException, UnsupportedEncodingException {
//        Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
//        c.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec(iv.getBytes()));
//        byte[] encrypted = c.doFinal(str.getBytes("UTF-8"));
//        String enStr = new String(Base64.encodeBase64(encrypted));
//
//        return enStr;
//    }
//
//    /**
//     * AES256으로 암호화된 txt 를 복호화한다.
//     *
//     * @param str 복호화할 문자열
//     * @return
//     * @throws NoSuchAlgorithmException
//     * @throws GeneralSecurityException
//     * @throws UnsupportedEncodingException
//     */
//    public String decrypt(String str) throws NoSuchAlgorithmException,
//            GeneralSecurityException, UnsupportedEncodingException {
//        Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
//        c.init(Cipher.DECRYPT_MODE, keySpec, new IvParameterSpec(iv.getBytes()));
//        byte[] byteStr = Base64.decodeBase64(str.getBytes());
//        return new String(c.doFinal(byteStr), "UTF-8");
//    }
//
//}

import android.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

    /**
     * 양방향 암호화 알고리즘인 AES256 암호화를 지원하는 클래스
     */

public class AES256Util {
    public static byte[] iv = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16 };

    // 사용자 지정 키로 AES256 암호화
    public static String encByKey(String key, String value) throws Exception {
        return encByKey(key.getBytes(), value.getBytes());
    }

    // 사용자 지정 키로 AES256 복호화
    public static String encByKey(byte[] key, byte[] value) throws Exception {
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, new IvParameterSpec(iv));
        byte[] randomKey = cipher.doFinal(value);
        return Base64.encodeToString(randomKey, Base64.DEFAULT);
    }

    // 사용자 지정 키로 AES256 복호화
    public static String decByKey(String key, String plainText) throws Exception {
        return decByKey(key.getBytes(), Base64.decode(plainText, Base64.DEFAULT));
    }

    // 사용자 지정 키로 AES256 복호화
    public static String decByKey(byte[] key, byte[] encText) throws Exception {
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new IvParameterSpec(iv));
        byte[] secureKey = cipher.doFinal(encText);
        return new String(secureKey);
    }
}
