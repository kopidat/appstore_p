package skimp.partner.store.provider;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.provider.BaseColumns;
import android.util.Log;

//public class DBManager {
//    public static final class TBL_AUTH_INFO implements BaseColumns {
//        public static final String NAME = "TBL_AUTH_INFO";
//
//        /** 토큰 정보 */
//        public static final String COL_token = "token";
//        /** 암호화된 패스워드 */
//        public static final String COL_encPwd = "encPwd";
//    }

    public class DBManager extends SQLiteOpenHelper {
        private static final String TAG = DBManager.class.getSimpleName();

        private static final String DB_AUTH = "skimp.partner.store.provider.auth.db";
        private static final int DB_VERSION = 1;

        public static final class TBL_AUTH implements BaseColumns {
            public static final String NAME = "TBL_AUTH";

            /** 스토어 로그인 후 발급받은 토큰 정보 */
            public static final String COL_token = "token";
            /** 암호화된 패스워드 */
            public static final String COL_encPwd = "encPwd";
        }

        private static DBManager instance = null;

        private DBManager(Context context, String dbName, SQLiteDatabase.CursorFactory factory, int version) {
            super(context, dbName, factory, version);
            Log.i(TAG, "DBManager(Context context, String dbName, SQLiteDatabase.CursorFactory factory, int version)");
        }

        public static DBManager getInstance(Context context) {
            if (instance == null) {
                instance = new DBManager(context, DB_AUTH, null, DB_VERSION);
            }
            return instance;
        }

        @Override
        public void onOpen(SQLiteDatabase db) {
            Log.i(TAG, "onOpen(SQLiteDatabase db)");
            super.onOpen(db);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i(TAG, "onCreate(SQLiteDatabase db)");
//            db.execSQL("CREATE TABLE IF NOT EXISTS " + TBL_AUTH.NAME + "(" + "_id INTEGER PRIMARY KEY AUTOINCREMENT," +
//                    "number TEXT," +
//                    "name TEXT," +
//                    "department TEXT," +
//                    "age TEXT," +
//                    "grade INTEGER);");

            createTable(db);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i(TAG, "onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)");
            if (oldVersion < newVersion) {
                db.execSQL("DROP TABLE IF EXISTS " + TBL_AUTH.NAME);
            }
            onCreate(db);
        }

        public Cursor query(String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy) {
            Log.i(TAG, "query(String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy)");
            return getReadableDatabase().query(TBL_AUTH.NAME, columns, selection, selectionArgs, groupBy, having, orderBy);
        }

        public long insert(ContentValues addRowValue) {
            Log.i(TAG, "insert(ContentValues addRowValue)");
            return getWritableDatabase().insert(TBL_AUTH.NAME, null, addRowValue);
        }

        public int delete(String whereClause, String[] whereArgs) {
            Log.i(TAG, "delete(String whereClause, String[] whereArgs)");
            return getWritableDatabase().delete(TBL_AUTH.NAME, whereClause, whereArgs);
        }

        public int insertAll(ContentValues[] values) {
            Log.i(TAG, "insertAll(ContentValues[] values)");
            SQLiteDatabase db = getWritableDatabase();

            db.beginTransaction();

            for (ContentValues contentValues : values) {
                db.insert(TBL_AUTH.NAME, null, contentValues);
            }

            db.setTransactionSuccessful();
            db.endTransaction();

            return values.length;
        }

        public int update(ContentValues updateRowValue, String whereClause, String[] whereArgs) {
            Log.i(TAG, "update(ContentValues updateRowValue, String whereClause, String[] whereArgs)");
            return getWritableDatabase().update(TBL_AUTH.NAME, updateRowValue, whereClause, whereArgs);
        }

        private void createTable(SQLiteDatabase db) {
            StringBuilder sqlBuilder = new StringBuilder();
            sqlBuilder.append("CREATE TABLE IF NOT EXISTS " + TBL_AUTH.NAME + " (");
            sqlBuilder.append(TBL_AUTH._ID + " INTEGER PRIMARY KEY AUTOINCREMENT,");
            sqlBuilder.append(TBL_AUTH.COL_token + " TEXT,");
            sqlBuilder.append(TBL_AUTH.COL_encPwd + " TEXT");
            sqlBuilder.append(");");
            db.execSQL(sqlBuilder.toString());
        }
    }
//}