//
//  NotificationService.m
//  NotificationService
//
//  Created by Sungoh Kang on 2021/06/08.
//

#import "NotificationService.h"
#import <MPush/PushManager.h>

@interface NotificationService ()

@property (nonatomic, strong) void (^contentHandler)(UNNotificationContent *contentToDeliver);
@property (nonatomic, strong) UNMutableNotificationContent *bestAttemptContent;

@end

@implementation NotificationService

- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {
    self.contentHandler = contentHandler;
    self.bestAttemptContent = [request.content mutableCopy];
    
    // Modify the notification content here...
//    self.bestAttemptContent.title = [NSString stringWithFormat:@"%@ [modified]", self.bestAttemptContent.title];
    
    // PushManager 초기화
    PushManager *manager = [PushManager defaultManager];
    
    NSDictionary *userInfoDic = [[NSDictionary alloc] init];
    NSDictionary *mpsDic = [[NSDictionary alloc] init];
    
    userInfoDic = self.bestAttemptContent.userInfo;
    mpsDic = [userInfoDic objectForKey:@"mps"];
    
    // 관련정보가 없을 경우에는 feedback처리 없이 완료
    if (mpsDic == nil) {
        self.contentHandler(self.bestAttemptContent);
        return;
    } else {
        NSString *cuid = [mpsDic objectForKey:@"cuid"];
        NSString *psid = [mpsDic objectForKey:@"psid"];
        
        if (cuid && psid) {
            // feedback API 호출
            // push메시지 객체와 cuid, psid값이 필요
            [manager feedback:self notification:self.bestAttemptContent.userInfo clientUID:cuid psID:psid completionHandler:^(BOOL success) {
                // 앱에서 중복으로 feedback처리를 하지 않도록 메시지 객체에 feedback 정보에 대한 값을 셋팅후 전달
                NSMutableDictionary *userInfo = [self.bestAttemptContent.userInfo mutableCopy];
                [userInfo setObject:@"true" forKey:@"feedback"];
                self.bestAttemptContent.userInfo = userInfo;
                
                self.contentHandler(self.bestAttemptContent);
            }];
        } else {
            self.contentHandler(self.bestAttemptContent);
        }
    }
}

- (void)serviceExtensionTimeWillExpire {
    // Called just before the extension will be terminated by the system.
    // Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used.
    self.contentHandler(self.bestAttemptContent);
}

@end
